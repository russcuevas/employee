<?php
session_start();
include '../database/connection.php';

// Ensure admin is logged in
if (!isset($_SESSION['admin_id'])) {
    header('location:admin_login.php');
    exit;
}

// Get user_id and date range from URL parameters
$user_id = $_GET['user_id'];
$from_date = $_GET['from_date'];
$to_date = $_GET['to_date'];

// Fetch user details
$get_user = "SELECT * FROM users WHERE user_id = :user_id";
$stmt_user = $conn->prepare($get_user);
$stmt_user->execute([':user_id' => $user_id]);
$user = $stmt_user->fetch(PDO::FETCH_ASSOC);

if (!$user) {
    die("User not found.");
}

// Function to count working days (excluding weekends) in the given date range
function countWorkingDays($start_date, $end_date)
{
    $start = new DateTime($start_date);
    $end = new DateTime($end_date);
    $work_days = 0;

    // Loop through the days in the range and count working days
    while ($start <= $end) {
        if ($start->format('N') < 6) { // Monday to Friday are working days (1-5)
            $work_days++;
        }
        $start->modify('+1 day');
    }

    return $work_days;
}

// Calculate the number of working days in the specified period
$working_days = countWorkingDays($from_date, $to_date);

// Correctly calculate daily salary (Basic Salary divided by the working days)
$basic_salary = $user['basic_salary'];
$daily_salary = ($working_days > 0) ? $basic_salary / $working_days : 0;

// Fetch timekeeping records
$query_timekeeping = "SELECT SUM(present) AS total_present, SUM(absent) AS total_absent 
                      FROM timekeeping 
                      WHERE user_id = :user_id AND log_date BETWEEN :from_date AND :to_date";
$stmt_timekeeping = $conn->prepare($query_timekeeping);
$stmt_timekeeping->execute([':user_id' => $user_id, ':from_date' => $from_date, ':to_date' => $to_date]);
$timekeeping = $stmt_timekeeping->fetch(PDO::FETCH_ASSOC);

$total_present = $timekeeping['total_present'] ?? 0;
$total_absent = $timekeeping['total_absent'] ?? 0;

// Fetch deductions
$query_deductions = "SELECT * FROM deductions WHERE user_id = :user_id";
$stmt_deductions = $conn->prepare($query_deductions);
$stmt_deductions->execute([':user_id' => $user_id]);
$deductions = $stmt_deductions->fetch(PDO::FETCH_ASSOC) ?: [];

// Calculate total deductions
$sss = $deductions['sss'] ?? 0;
$pagibig = $deductions['pagibig'] ?? 0;
$philhealth = $deductions['philhealth'] ?? 0;
$tax = $deductions['tax'] ?? 0;
$total_deductions = $sss + $pagibig + $philhealth + $tax;

// Calculate gross salary based on the actual present days
$gross_salary = $daily_salary * $total_present;

// Calculate net salary
$net_salary = $gross_salary - $total_deductions;

// Fetch approved absences
$query_absences = "SELECT absence_date, reason FROM absences 
                   WHERE user_id = :user_id AND status = 'Approved' 
                   AND absence_date BETWEEN :from_date AND :to_date";
$stmt_absences = $conn->prepare($query_absences);
$stmt_absences->execute([':user_id' => $user_id, ':from_date' => $from_date, ':to_date' => $to_date]);
$absences = $stmt_absences->fetchAll(PDO::FETCH_ASSOC);

$absence_reasons = !empty($absences) ? implode('<br>', array_map(function ($a) {
    return "{$a['absence_date']} - {$a['reason']}";
}, $absences)) : "No file leaves.";

// Handle payroll generation
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $generated_at = date('Y-m-d H:i:s');

    $insert_query = "INSERT INTO payroll (user_id, deduction_id, period_start, period_end, basic_salary, gross_salary, net_salary, generated_at) 
                     VALUES (:user_id, :deduction_id, :period_start, :period_end, :basic_salary, :gross_salary, :net_salary, :generated_at)";
    $stmt = $conn->prepare($insert_query);
    $stmt->execute([
        ':user_id' => $user_id,
        ':deduction_id' => $deductions['deduction_id'] ?? null,
        ':period_start' => $from_date,
        ':period_end' => $to_date,
        ':basic_salary' => $basic_salary,
        ':gross_salary' => $gross_salary,
        ':net_salary' => $net_salary,
        ':generated_at' => $generated_at
    ]);

    $_SESSION['success'] = "Payroll report generated successfully.";
    header('Location: payroll_management.php');
    exit;
}

?>

<!-- Display Payslip -->
<p>Payslip for <?php echo $user['name']; ?> from <?php echo $from_date; ?> to <?php echo $to_date; ?></p>
<p>Name: <?php echo $user['name']; ?></p>
<p>Position: <?php echo $user['position']; ?></p>
<p>Email: <?php echo $user['email']; ?></p>
<p>Basic Salary: ₱<?php echo number_format($basic_salary, 2); ?></p>
<p>Daily Salary: ₱<?php echo number_format($daily_salary, 2); ?></p>
<p>Working Days: <?php echo $working_days; ?> days</p>
<p>Present Days: <?php echo $total_present; ?> days</p>
<p>Absent Days: <?php echo $total_absent; ?> days</p>

<p>Deductions:</p>
<ul>
    <li>SSS: ₱<?php echo number_format($sss, 2); ?></li>
    <li>PAG-IBIG: ₱<?php echo number_format($pagibig, 2); ?></li>
    <li>PhilHealth: ₱<?php echo number_format($philhealth, 2); ?></li>
    <li>Tax: ₱<?php echo number_format($tax, 2); ?></li>
</ul>

<p>Gross Salary: ₱<?php echo number_format($gross_salary, 2); ?></p>
<p>Total Deductions: ₱<?php echo number_format($total_deductions, 2); ?></p>
<p><strong>Net Salary: ₱<?php echo number_format($net_salary, 2); ?></strong></p>